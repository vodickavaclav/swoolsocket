<?php declare(strict_types = 1);

namespace vavo\SwoolSocket\Service;

use vavo\SwoolSocket\DTO\Connection;
use Nette\Caching\Cache;
use Nette\Caching\IStorage;

class ConnectionStorage
{

	public const CACHE_NAME = 'websocket';

	public const CACHE_EXPIRE = '24 hours';

	/** @var array<int,string> */
	public $workerConnections = [];

	/** @var Cache */
	private $connections;

	public function __construct(IStorage $storage)
	{
		$this->connections = new Cache($storage, self::CACHE_NAME);
	}

	/**
	 * Get connection by connection number (ID)
	 */
	public function getConnectionById(int $id): ?Connection
	{
		if (isset($this->workerConnections[$id])) {
			return $this->getConnectionByHash($this->workerConnections[$id]);
		}

		return null;
	}

	/**
	 * Get connection by autogenerated hash
	 */
	public function getConnectionByHash(string $hash): ?Connection
	{
		return $this->connections->load($hash);
	}

	/**
	 * Remove request number and hash relation
	 */
	public function removeConnectionHash(int $id): void
	{
		unset($this->workerConnections[$id]);
	}

	/**
	 * Return array of worker connections
	 *
	 * @return array<int,string>
	 */
	public function getWorkerConnections(): array
	{
		return $this->workerConnections;
	}

	/**
	 * Remove connection from storage by connection hash
	 */
	public function removeConnection(string $hash): void
	{
		$this->connections->remove($hash);
	}

	/**
	 * Get all connection from storage by array of connection hashes
	 *
	 * @param string[] $connectionHashes
	 * @return Connection[]
	 */
	public function getAllConnections(array $connectionHashes): array
	{
		return $this->connections->bulkLoad($connectionHashes);
	}

	/**
	 * Create connection for the topic
	 */
	public function createConnection(int $topicId): Connection
	{
		$connection = new Connection($topicId);
		$this->saveConnection($connection);

		return $connection;
	}

	/**
	 * Add connection to storage
	 */
	public function saveConnection(Connection $connection): void
	{
		$this->connections->save($connection->getHash(), $connection, [
			Cache::TAGS => ['connections/' . $connection->getHash()],
			Cache::EXPIRE => self::CACHE_EXPIRE,
		]);
	}

	/**
	 * Store request number and hash relation
	 */
	public function addConnectionHash(int $id, string $hash): void
	{
		$this->workerConnections[$id] = $hash;
	}

}
