<?php declare(strict_types = 1);

namespace vavo\SwoolSocket\Service;

use vavo\SwoolSocket\DTO\Connection;
use Nette\Caching\Cache;
use Nette\Caching\Storage;
use Swoole\Http\Request;

class ConnectionStorage
{

	public const COOKIE_NAME = 'websocket_connection_id';

	public const CACHE_NAME = 'websocket';

	public const CACHE_EXPIRE = '20 minutes';

	/** @var array<int,string> */
	public $hashes;

	/** @var Cache */
	private $connections;

	public function __construct(Storage $storage)
	{
		$this->connections = new Cache($storage, self::CACHE_NAME);
	}

	/**
	 * Get connection by connection number (ID)
	 */
	public function getConnectionById(int $id): ?Connection
	{
		if (isset($this->hashes[$id])) {
			return $this->getConnectionByHash($this->hashes[$id]);
		}

		return null;
	}

	/**
	 * Store request number and hash relation
	 */
	public function addConnectionHash(int $id, string $hash): void
	{
		$this->hashes[$id] = $hash;
	}

	/**
	 * Remove request number and hash relation
	 */
	public function removeConnectionHash(int $id): void
	{
		unset($this->hashes[$id]);
	}

	/**
	 * Add connection to storage
	 */
	public function saveConnection(Connection $connection): void
	{
		$this->connections->save($connection->getHash(), $connection, [
			Cache::TAGS => ['connections/' . $connection->getHash()],
			Cache::EXPIRE => self::CACHE_EXPIRE,
		]);
	}

	/**
	 * Get connection by autogenerated hash
	 */
	public function getConnectionByHash(string $hash): ?Connection
	{
		return $this->connections->load($hash);
	}

	/**
	 * Remove connection from storage by connection hash
	 */
	public function removeConnection(string $hash): void
	{
		$this->connections->remove($hash);
	}

	/**
	 * Get all connection from storage by array of connection hashes
	 *
	 * @param string[] $connectionHashes
	 * @return Connection[]
	 */
	public function getAllConnections(array $connectionHashes): array
	{
		return $this->connections->bulkLoad($connectionHashes);
	}

	/**
	 * Create connection for the topic
	 */
	public function createConnection(int $topicId): Connection
	{
		$connection = new Connection($topicId);
		$this->saveConnection($connection);

		return $connection;
	}

	/**
	 * Save connection number and hash relation from cookie
	 */
	public function saveConnectionFromRequest(Request $request): void
	{
		// Check if cookie exists
		if (!empty($request->cookie[self::COOKIE_NAME])) {
			$connection = $this->getConnectionByHash($request->cookie[self::COOKIE_NAME]);

			if ($connection !== null) {
				// Store request ID and connection hash for later usage
				$this->addConnectionHash($request->fd, $connection->getHash());
			}
		}
	}

}
